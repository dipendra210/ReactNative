from rest_framework import serializers
from django.contrib.auth.models import User
from rest_framework_jwt.settings import api_settings
from .models import Brand, Post, Model, UserRequest

class RegisterSerializer(serializers.ModelSerializer):
    # password = serializers.CharField(write_only=True)
    # token    = serializers.CharField(allow_blank=True, read_only=True)

    class Meta:
        model = User
        # fields = ['username', 'email', 'password', 'token']
        fields = ['email', 'username', 'password']

    def create(self, validated_data):
        email = validated_data['email']
        username = validated_data['username']
        password = validated_data['password']

        new_user = User(username=username)
        new_user.set_password(password)
        new_user.set_email(email)
        
        new_user.save()

        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER
        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER

        payload = jwt_payload_handler(new_user)
        token = jwt_encode_handler(payload)

        validated_data["token"] = token
        return user;

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'password']
        # fields = ['id', 'username']

class CarBrandSerializer(serializers.ModelSerializer):
    class Meta:
        model = Brand
        fields = '__all__'

class CarModelSerializer(serializers.ModelSerializer):
    category = serializers.PrimaryKeyRelatedField(queryset=Brand.objects.all())
    class Meta:
        model = Model
        fields = ['id', 'name', 'category']

class UserRequestSerializer(serializers.ModelSerializer):
    user  = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    brand = serializers.PrimaryKeyRelatedField(queryset=Brand.objects.all())
    model = serializers.PrimaryKeyRelatedField(queryset=Model.objects.all())
    
    class Meta:
        model = UserRequest
        fields = ['user', 'brand', 'model', 'year_from', 'year_to', 'price_start', 'price_end', 'trans_gear', 'kilo_from', 'kilo_to']

class PostSerializer4Create(serializers.ModelSerializer):
    user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    brand = serializers.PrimaryKeyRelatedField(queryset=Brand.objects.all())
    model = serializers.PrimaryKeyRelatedField(queryset=Model.objects.all())

    class Meta:
        model = Post
        fields = ['user', 'brand', 'model', 'year_of_made', 'price_is_hidden', 'is_freezed', 'convertable', 'viewers', 'posted_on', 'img0', 'img1', 'img2', 'img3', 'img4', 'img5', 'img6', 'transmission', 'price', 'Kilometer', 'sunroof', 'description', 'contact', 'whatsApp']

class PostSerializer(serializers.ModelSerializer):
    user  = UserSerializer(read_only=True)
    brand = CarBrandSerializer(read_only=True)
    model = CarModelSerializer(read_only=True)

    class Meta:
        model = Post
        fields = '__all__'
