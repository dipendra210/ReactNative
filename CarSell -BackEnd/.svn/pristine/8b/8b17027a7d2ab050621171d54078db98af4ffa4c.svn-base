from django.shortcuts import render, get_object_or_404
from django.views.generic import ListView
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import permissions
from rest_framework import status
from rest_framework.generics import (
    CreateAPIView,
    RetrieveAPIView ,
    ListAPIView,
    RetrieveUpdateAPIView ,
    DestroyAPIView)

from .models import Brand, Post, Model, UserRequest
from django.contrib.auth.models import User

from .serializers import CarBrandSerializer, RegisterSerializer, PostSerializer, PostSerializer4Create, CarModelSerializer, UserRequestSerializer

# Create your views here.

class RegisterAPIView(CreateAPIView):
    serializer_class = RegisterSerializer
    queryset = User.objects.all()

# GETS THE SELLING BRANDS
class BrandList(ListAPIView):
    serializer_class = CarBrandSerializer
    queryset = Brand.objects.all()

# GETS ALL THE POSTS IN THE DATABASE
class GetPost(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        post_id = self.kwargs['post_id']
        post = Post.objects.filter(id=post_id)
        print(post)
        return post


# GETS THE LATEST (5) POSTS IN THE DATABASE
class LatestPosts(ListAPIView):
    queryset = Post.objects.all().order_by('-posted_on')[:5]
    serializer_class = PostSerializer

# GETS THE MOST (5) POSTS IN THE DATABASE
class MostViewed(ListAPIView):
    queryset = Post.objects.all().order_by('-viewers')[:5]
    serializer_class = PostSerializer

# DO THE FUNCTIONALITY OF THE VIEWERS COUNT
class ViewsCount(APIView):
    permission_classes = (permissions.AllowAny,)
    def post(self, request, post_id, format=None):
        post = Post.objects.get(id=post_id)
        post.viewers += 1
        post.save()
        return Response(post.viewers)
# GET POST LIST BY BRAND ID
class PostListByBrand(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        brand_id = self.kwargs['brand_id']
        brand = Brand.objects.get(id=brand_id)
        return brand.post_set.all()

# GET MODEL LIST BY BRAND ID
class ModelListByBrand(ListAPIView):
    serializer_class = CarModelSerializer

    def get_queryset(self, *args, **kwargs):
        brand_id = self.kwargs['brand_id']
        brand = Brand.objects.get(id=brand_id)
        return brand.model_set.all()

# SAVING USER REQUEST IN DB
class CreateRequest(APIView):
    serializer_class = UserRequestSerializer

    def post(self, request, format=None):
        # ddd = {'user':1, 'brand':1, 'model':1, 'year_from':2010, 'year_to':2018, 'price_start':10, 'price_end':20, 'trans_gear':'Automatic', 'kilo_from':20, 'kilo_to':30}
        serializer = UserRequestSerializer(data=request.data)
        print(request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# SUBMIT POSTING
class PostCreate(APIView):
    def post(self, request, format=None):
        serializer = PostSerializer4Create(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# GETTING POSTS BY USER ID
class UserPosts(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        user_id = self.kwargs['user_id']
        user = User.objects.get(id=user_id)
        return user.post_set.all()


# FIND MATCHING USER REQUEST
class MatchingRequest(APIView):
    serializer = PostSerializer



# Save Push Notification
def savePushToken( request ):
    if request.method == 'POST':
        user = request.POST.get('user_id')
        print(user)

        expoToken = request.POST.get('token')
        print(expoToken)

        user = User.objects.get(pk=user)
        user.profile.expo_token = expoToken
        user.save()