from django.shortcuts import render, get_object_or_404
from django.views.generic import ListView
from django.views.generic import View
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import permissions
from rest_framework import status
from rest_framework.generics import (
    CreateAPIView,
    RetrieveAPIView ,
    ListAPIView,
    RetrieveUpdateAPIView ,
    DestroyAPIView)

from .models import Brand, Post, Model, UserRequest
from django.contrib.auth.models import User

from .serializers import UserSerializer, CarBrandSerializer, RegisterSerializer, PostSerializer, PostSerializer4Create, CarModelSerializer, UserRequestSerializer, PostSerializer4Special

from django.core import serializers
import json

from exponent_server_sdk import DeviceNotRegisteredError
from exponent_server_sdk import PushClient
from exponent_server_sdk import PushMessage
from exponent_server_sdk import PushResponseError
from exponent_server_sdk import PushServerError
from requests.exceptions import ConnectionError
from requests.exceptions import HTTPError

from django.http import HttpResponse

# Create your views here.

#REGISTER USERS
class RegisterAPIView(CreateAPIView):
    serializer_class = RegisterSerializer
    queryset = User.objects.all()

# GETS THE SELLING BRANDS
class BrandList(ListAPIView):
    serializer_class = CarBrandSerializer
    queryset = Brand.objects.all()

# GETS ALL THE POSTS IN THE DATABASE
class GetPost(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        post_id = self.kwargs['post_id']
        post = Post.objects.filter(id=post_id)
        print(post)
        return post


# GETS THE LATEST (5) POSTS IN THE DATABASE
class LatestPosts(ListAPIView):
    queryset = Post.objects.all().order_by('-posted_on')[:5]
    serializer_class = PostSerializer

# GETS THE MOST (5) POSTS IN THE DATABASE
class MostViewed(ListAPIView):
    queryset = Post.objects.all().order_by('-viewers')[:5]
    serializer_class = PostSerializer

# DO THE FUNCTIONALITY OF THE VIEWERS COUNT
class ViewsCount(APIView):
    permission_classes = (permissions.AllowAny,)
    def post(self, request, post_id, format=None):
        post = Post.objects.get(id=post_id)
        post.viewers += 1
        post.save()
        return Response(post.viewers)

# GET POST LIST BY BRAND ID
class PostListByBrand(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        brand_id = self.kwargs['brand_id']
        brand = Brand.objects.get(id=brand_id)
        return brand.post_set.all()

# GET MODEL LIST BY BRAND ID
class ModelListByBrand(ListAPIView):
    serializer_class = CarModelSerializer

    def get_queryset(self, *args, **kwargs):
        brand_id = self.kwargs['brand_id']
        brand = Brand.objects.get(id=brand_id)
        return brand.model_set.all()

# SAVING USER REQUEST
class CreateRequest(APIView):
    serializer_class = UserRequestSerializer

    def post(self, request, format=None):      
        serializer = UserRequestSerializer(data=request.data)
        
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

#SUBMIT SPECIAL POST
class SpecialPost(APIView):
    def post(self, request, format=None):
        serializer = PostSerializer4Special(data=request.data)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# SUBMIT POSTING
class PostCreate(APIView):
    def post(self, request, format=None):
        serializer = PostSerializer4Create(data=request.data)

        if serializer.is_valid():
            serializer.save()

            userList = getMatchingUsers(request.data) #GET USER LIST TO SEND PUSH NOTIFICATION

            for userId in userList:
                print('User ID for posting with properly request...............')
                print(userId['fields']['user'])

                user = User.objects.get(id=userId['fields']['user'])
                expoToken = user.profile.expo_token

                if expoToken:
                    print('expoToken.....................')
                    print(expoToken)

                    send_push_message(expoToken, 'Posted you wanted car')
                    print('sent.................................')

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    # FIND MATCHING USER REQUEST
    def getMatchingUsers(post_data):
        model_id        = post_data.pop('model')
        year_of_made    = post_data.pop('year_of_made')
        price           = post_data.pop('price')
        Kilometer       = post_data.pop('Kilometer')
        trans_gear      = post_data.pop('transmission')

        queryset = UserRequest.objects.all()
        queryset = queryset.filter(model_id=model_id)
        queryset = queryset.filter(trans_gear=trans_gear)
        queryset = queryset.filter(year_from__lte=year_of_made)
        queryset = queryset.filter(year_to__gte=year_of_made)
        queryset = queryset.filter(price_start__lte=price)
        queryset = queryset.filter(price_end__gte=price)
        queryset = queryset.filter(kilo_from__lte=Kilometer)
        queryset = queryset.filter(kilo_to__gte=Kilometer)

        data = serializers.serialize('json', list(queryset), fields=('user_id'))
        userList = json.loads(data)

        return userList

    # Basic arguments. You should extend this function with the push features you
    # want to use, or simply pass in a `PushMessage` object.
    def send_push_message(token, message, extra=None):
        try:
            response = PushClient().publish(
                PushMessage(to=token,
                            body=message,
                            data=extra))
        except PushServerError as exc:
            # Encountered some likely formatting/validation error.
            rollbar.report_exc_info(
                extra_data={
                    'token': token,
                    'message': message,
                    'extra': extra,
                    'errors': exc.errors,
                    'response_data': exc.response_data,
                })
            raise
        except (ConnectionError, HTTPError) as exc:
            # Encountered some Connection or HTTP error - retry a few times in
            # case it is transient.
            rollbar.report_exc_info(
                extra_data={'token': token, 'message': message, 'extra': extra})
            raise self.retry(exc=exc)

        try:
            # We got a response back, but we don't know whether it's an error yet.
            # This call raises errors so we can handle them with normal exception
            # flows.
            response.validate_response()
        except DeviceNotRegisteredError:
            # Mark the push token as inactive
            from notifications.models import PushToken
            PushToken.objects.filter(token=token).update(active=False)
        except PushResponseError as exc:
            # Encountered some other per-notification error.
            rollbar.report_exc_info(
                extra_data={
                    'token': token,
                    'message': message,
                    'extra': extra,
                    'push_response': exc.push_response._asdict(),
                })
            raise self.retry(exc=exc)


# GETTING POSTS BY USER ID
class UserPosts(ListAPIView):
    serializer_class = PostSerializer

    def get_queryset(self, *args, **kwargs):
        user_id = self.kwargs['user_id']
        user = User.objects.get(id=user_id)
        return user.post_set.all()

# Save Push Notification
class SavePushToken( APIView ):
    serializer_class = PostSerializer

    def post(self, request, format=None):
        user_id    = request.data.pop('user_id')
        expo_token = request.data.pop('token')

        user = User.objects.get(id=user_id)
        user.profile.expo_token = expo_token
        user.save()

        return Response(user.profile.expo_token)